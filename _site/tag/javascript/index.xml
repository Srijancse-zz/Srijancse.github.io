<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Your Title - javascript</title>
 <link href="http://srijanagarwal.me/tag/javascript/index.xml" rel="self"/>
 <link href="http://srijanagarwal.me/tag/javascript.html"/>
 <updated>2017-05-13T18:41:01+05:30</updated>
 <id>http://srijanagarwal.me/tag/javascript.html</id>
 <author>
   <name>Author Here</name>
 </author>
 
 <entry>
   <title>Operational Transformation, the real time collaborative editing algorithm [Operations and Transformations]</title>
   <link href="http://srijanagarwal.me/writing/operational-transformation/"/>
   <updated>2017-05-11T21:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/operational-transformation</id>
   <content type="html">&lt;p&gt;This is the second post related to &lt;strong&gt;Operational Transformation&lt;/strong&gt;, the real time collaborative editing algorithm. The first post was &lt;a href=&quot;http://www.srijanagarwal.me/writing/collaborative-editing/&quot;&gt;How Real-Time Collaborative Editors work? [Operational Transformation]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I would be digging deep into the transformation function, how clients wait for &lt;strong&gt;acknowledgement&lt;/strong&gt; from server before sending more operations and the compound operational transformation.&lt;/p&gt;

&lt;h3 id=&quot;transformation-function&quot;&gt;Transformation function&lt;/h3&gt;
&lt;p&gt;To recap, for handling concurrent operations, we use the &lt;strong&gt;tranform&lt;/strong&gt; function that takes two operations that have been applied to the same document state (but on different clients) and computes a new operation that can be applied after the second operation and that preserves the first operation’s intended change.&lt;/p&gt;

&lt;p&gt;Basically, there exists two kinds of transformation functions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Inclusion Transformation&lt;/strong&gt; : denoted as IT(a, b), which transforms Operation &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; against another operation &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; in such a way that the impact of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is effectively included.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Exclusion Transformation&lt;/strong&gt; : denoted as ET(a, b), which transforms operation &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; against another operation &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; in such a way that the impact of &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; is effectively excluded.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Transformation functions are named differently in different OT systems, and some compound transformation functions may combine both IT and ET functionalities in one function. One of the papers, &lt;a href=&quot;http://www.springer.com/cda/content/document/cda_downloaddocument/9788132226369-c2.pdf?SGWID=0-0-45-1564306-p177709634&quot;&gt;Analysis of Operational Transformation Algorithms&lt;/a&gt; is really good, and analyses all the different OT systems.&lt;/p&gt;

&lt;h4 id=&quot;character-wise-transformation-function&quot;&gt;Character wise Transformation Function&lt;/h4&gt;

&lt;p&gt;A character wise transformation function’s algorithm (for consistency maintenance) is simple.  As an example, for a pair of character-wise operations &lt;code class=&quot;highlighter-rouge&quot;&gt;Ins[p, c]&lt;/code&gt; (to insert a character c at the position p) and &lt;code class=&quot;highlighter-rouge&quot;&gt;Del[p]&lt;/code&gt; (to delete a character at position p), four IT functions, denoted as &lt;code class=&quot;highlighter-rouge&quot;&gt;Tii&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Tid&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Tdi&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Tdd&lt;/code&gt;, can be defined as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Tii(Ins[p1,c1], Ins[p2, c2]) {
      if p1 &amp;lt; p2  or (p1 = p2 and u1 &amp;gt; u2) // breaking insert-tie using user identifiers (u1, u2)
            return Ins[p1, c1];  // e.g. Tii(Ins[3, “a”], Ins[4, “b”]) = Ins[3, “a”]
      else return Ins[p1+1, c1]; } // Tii(Ins[3, “a”], Ins[1, “b”]) = Ins[4, “a”]
 
Tid(Ins[p1,c1], Del[p2]) {          
      if p1 &amp;lt;= p2 return Ins[p1, c1]; // e.g. Tid(Ins[3, “a”], Del[4]) = Ins[3, “a”]
     else return Ins[p1-1, c1]; } // Tid(Ins[3, “a”], Del[1] ) = Ins[2, “a”]
 
Tdi(Del[p1], Ins[p2, c2]) {
      if p1 &amp;lt; p2 return Del[p1];  // e.g.  Tdi(Del[3], Ins[4, “b”]) = Del[3]
      else return Del[p1+1]; } // Tdi(Del[3], Ins[1, “b”]) = Del[4]
 
Tdd(Del[p1], Del[p2]) {
      if p1 &amp;lt; p2 return Del[p1]; // e.g.   Tdd(Del[3], Del[4]) = Del[3]
      else if p1 &amp;gt; p2 return Del[p1-1]; // Tdd(Del[3], Del[1]) = Del[2]
      else return I; } // breaking delete-tie using I (identity op)  Tdd(Del[3]. Del[3]) = I 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;String-wise transformation function’s algorithm is significantly more challenging than character-wise operations’ because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;a string delete covers a deleting range, which may include the characters in the string as well as the interval positions between characters.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;concurrent string delete operations may arbitrarily overlap with each other and even with concurrent insert operations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;a string inserted by a previous insert operation may be changed by following (causally after) insert and delete operations.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;undo-related-application&quot;&gt;Undo Related Application&lt;/h3&gt;

&lt;p&gt;Operational Transformation ofcourse supports undo in collaborative editors which impose additional  requirements :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;One is the undo effect, which requires that undoing an operation O achieves the effect of eliminating the effect of O but retains the effects of other operations in the document. In other words, the effect of undoing O is to &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; the document state into one that it would have gone to if O had never been performed but other operations had been performed. This undo effect is consistent with the linear undo effect in single-user editing environments, and also suitable for non-linear undo (e.g. “undoing any operation at any time”) in multi-user and concurrent editing environments.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The other is the undo property, which requires that the document be restored to any previous state by undoing all operations executed after that state, regardless of the order in which those operations are undone. This property is required to ensure the capability of “restoring any prior state”, which is essential for an undo solution to support error-recovery and alternative exploration.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;image-wrap&quot;&gt;
&lt;div class=&quot;image-block&quot;&gt;
    &lt;img src=&quot;/images/undo.jpg&quot; alt=&quot;undo&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;client---server-acknowledgement-approach&quot;&gt;Client - Server Acknowledgement approach&lt;/h3&gt;

&lt;p&gt;Just to recap, what the theory of Operational Transformation in &lt;a href=&quot;http://lively-kernel.org/repository/webwerkstatt/projects/Collaboration/paper/Jupiter.pdf&quot;&gt;High Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System&lt;/a&gt; says is that a client can send operations in a sequence to the server and vice versa. This means that the client and server can traverse through the state space through different paths of operational transformation to the same convergent state depending on when they receive the other operations.&lt;/p&gt;

&lt;div class=&quot;image-wrap&quot;&gt;
&lt;div class=&quot;image-block&quot;&gt;
    &lt;img src=&quot;/images/ot-paths.png&quot; alt=&quot;otpath&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When multiple clients are connected to the server, every client and server pair have their own state space. One shortcoming of this is that the server would need to carry a state space for every connected client, which can be very memory-intensive. In addition, this complicates the server algorithm by requiring it to convert clients’ operations between state spaces.&lt;/p&gt;

&lt;p&gt;Having a simple and efficient server is important in making waves reliable and scalable. With this goal, Google’s Operational Transformation algorithm modifies the basic theory of OT by requiring the client to wait for &lt;strong&gt;acknowledgement&lt;/strong&gt; from the server before sending more operations. When a server acknowledges a client’s operation, it means the server has transformed the client’s operation, applied it to the server’s copy of the wavelet and broadcast the transformed operation to all other connected clients. While the client is waiting for the acknowledgement, it caches operations produced locally and sends them in bulk later.&lt;/p&gt;

&lt;p&gt;With the addition of acknowledgements, a client can infer the server’s OT path. By having this, the client can send operations to the server that are always on the server’s OT path.&lt;/p&gt;

&lt;p&gt;This has the important benefit that the server only needs to have &lt;strong&gt;a single state space&lt;/strong&gt;, which is the history of operations it has applied. When it receives a client’s operation, it only needs to transform the operation against the operation history, apply the transformed operation, and then broadcast it. This source of truth also forces the client to wait for the server to &lt;strong&gt;acknowledge&lt;/strong&gt; the operation that the client has just sent which would mean that the client always stays on the server’s OT path. This would help in keeping a single history of operations without actually having to keep a mirror of the state for each client that is connected. That would eventually mean the number of clients that are connected to the server would have only one single copy of the document on the server. One trade off of this change is that a client will see chunks of operations from another client in intervals of approximately one round trip time to the other client.&lt;/p&gt;

&lt;div class=&quot;image-wrap&quot;&gt;
&lt;div class=&quot;image-block&quot;&gt;
    &lt;img src=&quot;/images/ot.png&quot; alt=&quot;ot&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;compound-operational-transformation&quot;&gt;Compound Operational Transformation&lt;/h3&gt;
&lt;p&gt;A great tutorial on Compound Operational Transformation is &lt;a href=&quot;http://www.codecommit.com/blog/java/understanding-and-applying-operational-transformation&quot;&gt;Understanding and Applying Operational Transformation by Daniel Spiewak&lt;/a&gt;. One must read this to understand how Compound Operational Transformation works.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As I have mentioned earlier, &lt;strong&gt;Operational Transformation&lt;/strong&gt; is a very powerful tool that allows to build great collaborative apps with support for non-blocking concurrent editing. I would keep updating the blogpost with whatever I learn more about OT and other real time collaborative editing algorithms.&lt;/p&gt;

&lt;p&gt;Quoting from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Operational_transformation#Critique_of_OT&quot;&gt;Wikipedia’s Page&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;While the classic OT approach of defining operations through their offsets in the text seems to be simple and natural, real-world distributed systems raise serious issues. Namely, that operations propagate with finite speed, states of participants are often different, thus the resulting combinations of states and operations are extremely hard to foresee and understand. As Li and Li put it, “Due to the need to consider complicated case coverage, formal proofs are very complicated and error-prone, even for OT algorithms that only treat two characterwise primitives (insert and delete)”.&lt;/p&gt;

&lt;p&gt;Similarly, Joseph Gentle who is a former Google Wave engineer and an author of the Share.JS library wrote, “Unfortunately, implementing OT sucks. There’s a million algorithms with different tradeoffs, mostly trapped in academic papers. The algorithms are really hard and time consuming to implement correctly. […] Wave took 2 years to write and if we rewrote it today, it would take almost as long to write a second time.”&lt;/p&gt;

&lt;p&gt;For OT to work, every single change to the data needs to be captured: “Obtaining a snapshot of the state is usually trivial, but capturing edits is a different matter altogether. […] The richness of modern user interfaces can make this problematic, especially within a browser-based environment.” An alternative to OT is differential synchronization.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;I’ve read the following papers and articles to learn about Operational Transformation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://lively-kernel.org/repository/webwerkstatt/projects/Collaboration/paper/Jupiter.pdf&quot;&gt;High Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System&lt;/a&gt; &lt;em&gt;Authored by David A. Nichols, Pavel Curtis, Michael Dixon, and John Lamping.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements&lt;/a&gt; &lt;em&gt;Authored by Chengzheng Sun and Clarence (Skip) Ellis.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.waveprotocol.org/whitepapers/operational-transform&quot;&gt;Google’s whitepaper on Operational Transformation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.lri.fr/~mbl/ENS/CSCW/2012/papers/Ellis-SIGMOD89.pdf&quot;&gt;Concurrency Control in Groupware Systems&lt;/a&gt; &lt;em&gt;Authored by C.A. Ellis, S.J. Gibbs&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hal.archives-ouvertes.fr/file/index/docid/629503/filename/doce63-ahmednacer.pdf&quot;&gt;Evaluating CRDTs for Real-time Document Editing&lt;/a&gt; &lt;em&gt;Authored by Mehdi Ahmed-Nacer, Claudia-Lavinia Ignat, G´erald Oster, Hyun-Gul Roh, Pascal Urso&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hal.inria.fr/hal-00957167/document&quot;&gt;Merging OT and CRDT Algorithms&lt;/a&gt; &lt;em&gt;Authored by Mehdi Ahmed-Nacer, Pascal Urso, Valter Balegas, Nuno Pregui¸ca&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operational_transformation&quot;&gt;Wikipedia on Operational Transformation&lt;/a&gt; &lt;em&gt;One of the most informative articles, I have found on wikipedia, suprisingly.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>How Real-Time Collaborative Editors work? [Operational Transformation]</title>
   <link href="http://srijanagarwal.me/writing/collaborative-editing/"/>
   <updated>2017-05-01T06:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/collaborative-editing</id>
   <content type="html">&lt;p&gt;Recently, I’ve been diving deep on how &lt;strong&gt;real-time collaborative&lt;/strong&gt; editing works. I have been reading various papers on both the methods of implementing collaborative editing : &lt;strong&gt;Operational Transformation&lt;/strong&gt;, which goes back to 1989, when it was first implemented by the &lt;a href=&quot;https://www.lri.fr/~mbl/ENS/CSCW/2012/papers/Ellis-SIGMOD89.pdf&quot;&gt;GROVE (GRoup Outtie Viewing Editor)&lt;/a&gt; system (this algorithm is quite old, and Google uses this algorithm for collaborative editing for Google Docs, Google Slides, Wave, etc) and &lt;strong&gt;Conflict-Free Replicated Data Types&lt;/strong&gt;, which is a much newer approach to real-time editing.&lt;/p&gt;

&lt;h3 id=&quot;real-challenge-of-collaborative-editing&quot;&gt;Real challenge of collaborative editing&lt;/h3&gt;

&lt;p&gt;If you know how real-time collaborative editing works, then you may know that handling concurrent editing in multi user environment gracefully is very challenging. However, a few simple concepts can simplify this problem. The main challenge, as mentioned, with collaborative editing is the concurrency control [&lt;strong&gt;concurrent edits&lt;/strong&gt;] to the document are not commutative. This needs to be causally ordered before applying either by undoing history, or by transforming the operations [&lt;strong&gt;operational transformation&lt;/strong&gt;] before applying them to make them seem commutative.&lt;/p&gt;

&lt;h3 id=&quot;bringing-latency-into-action&quot;&gt;Bringing Latency into action&lt;/h3&gt;

&lt;p&gt;Introducing latency between the client and server is where the problems arise. Latency in a collaborative editor introduces the possibility of version conflicts. Here, where, I said Operational Transformation will come into action.&lt;/p&gt;

&lt;p&gt;Let’s take an example :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Client’s state :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; ABCD &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Server’s state :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; ABCD &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s say, &lt;em&gt;Client&lt;/em&gt; enters &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; in between &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;D&lt;/code&gt; , the operation would look something like this :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insert(X,3) //where 3 is the position where x is going to be added (0=A, 1=B, 2=C ..)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And at the same time, &lt;em&gt;Server&lt;/em&gt; deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; , the operation would be :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delete(B,1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What actually should happen is that the client and server should both end with &lt;code class=&quot;highlighter-rouge&quot;&gt;ACXD&lt;/code&gt; but in reality, &lt;em&gt;client&lt;/em&gt; ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;ACXD&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Document State -&amp;gt; ABCD
&quot;Insert &#39;X&#39;&quot; operation at offset 3 [local] -&amp;gt; ABCXD
&quot;Delete &#39;B&#39;&quot; operation at offset 1 [remote] -&amp;gt; ACXD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;but the &lt;em&gt;server&lt;/em&gt; ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;ACDX&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Document State -&amp;gt; ABCD
&quot;Delete &#39;B&#39;&quot; operation at offset 1 [local] -&amp;gt; ACD
&quot;Insert &#39;X&#39;&quot; operation at offset 3 [remote] -&amp;gt; ACDX
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ofcourse, &lt;code class=&quot;highlighter-rouge&quot;&gt;ACXD != ACDX&lt;/code&gt; and the document which is shared now is in wrong state.&lt;/p&gt;

&lt;p&gt;Here is where the &lt;strong&gt;Operational Transformation&lt;/strong&gt; algorithm comes to the rescue.&lt;/p&gt;

&lt;h3 id=&quot;operational-transformation-algorithm&quot;&gt;Operational Transformation Algorithm&lt;/h3&gt;

&lt;p&gt;Operational Transformation (OT) is an algorithm/technique for the transformation of operations such that they can be applied to documents whose states have diverged, bringing them both back to the same state.&lt;/p&gt;

&lt;h4 id=&quot;how-does-operational-transformation-work&quot;&gt;How does Operational Transformation work?&lt;/h4&gt;

&lt;p&gt;A short overview of how OT works :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Every change (insertion or deletion) is represented as an &lt;strong&gt;operation&lt;/strong&gt;. An operation can be applied to the current document which results into a new document state.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To handle concurrent operations, we use the &lt;strong&gt;tranform&lt;/strong&gt; function that takes two operations that have been applied to the same document state (but on different clients) and computes a new operation that can be applied after the second operation and that preserves the first operation’s intended change.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s apply Operational Transformation in the original example.&lt;/p&gt;

&lt;p&gt;If we apply OT, &lt;em&gt;Client&lt;/em&gt; will see :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Document State -&amp;gt; ABCD
&quot;Insert &#39;X&#39;&quot; operation at offset 3 [local] -&amp;gt; ABCXD
&quot;Delete &#39;B&#39;&quot; operation at offset 1 [transformed] -&amp;gt; ACXD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and &lt;em&gt;Server&lt;/em&gt; will see :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Starting Document State -&amp;gt; ABCD
&quot;Delete &#39;B&#39;&quot; operation at offset 1 [local] -&amp;gt; ACD
&quot;Insert &#39;X&#39;&quot; operation at offset 2 [transformed] -&amp;gt; ACXD //Transform function would add add it in the new (3 - 1 = 2) position 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;client---server-ot-approach-to-collaborative-editing&quot;&gt;Client - Server [OT] Approach to Collaborative Editing&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;transform&lt;/strong&gt; function is used to build a client-server protocol that can handle collaboration between any number of clients.&lt;/p&gt;

&lt;p&gt;Choosing a Client-Server architecture will allow scouting a large number of clients without actually complicating the environment. Also, there will be a single system which holds the source of truth i.e. the server, so even if the clients crash/go offline for a long time, we can go back to the server and fetch the document easily.&lt;/p&gt;

&lt;p&gt;This source of truth also forces the client to wait for the server to &lt;strong&gt;acknowledge&lt;/strong&gt; the operation that the client has just sent which would mean that the client always stays on the server’s OT path. This would help in keeping a single history of operations without actually having to keep a mirror of the state for each client that is connected. That would eventually mean the number of clients that are connected to the server would have only one single copy of the document on the server.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Operational Transformation&lt;/strong&gt; is a very powerful tool that allows to build great collaborative apps with support for non-blocking concurrent editing. I am looking forward to dive deep into the algorithm (and ofcourse extending this blogpost) and possibly working on an editor which supports it as well.&lt;/p&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;

&lt;p&gt;I’ve read the following papers and articles to learn about Operational Transformation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://lively-kernel.org/repository/webwerkstatt/projects/Collaboration/paper/Jupiter.pdf&quot;&gt;High Latency, Low-Bandwidth Windowing in the Jupiter Collaboration System&lt;/a&gt; &lt;em&gt;Authored by David A. Nichols, Pavel Curtis, Michael Dixon, and John Lamping.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.53.933&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;Operational Transformation in Real-Time Group Editors: Issues, Algorithms, and Achievements&lt;/a&gt; &lt;em&gt;Authored by Chengzheng Sun and Clarence (Skip) Ellis.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.waveprotocol.org/whitepapers/operational-transform&quot;&gt;Google’s whitepaper on Operational Transformation&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.lri.fr/~mbl/ENS/CSCW/2012/papers/Ellis-SIGMOD89.pdf&quot;&gt;Concurrency Control in Groupware Systems&lt;/a&gt; &lt;em&gt;Authored by C.A. Ellis, S.J. Gibbs&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hal.archives-ouvertes.fr/file/index/docid/629503/filename/doce63-ahmednacer.pdf&quot;&gt;Evaluating CRDTs for Real-time Document Editing&lt;/a&gt; &lt;em&gt;Authored by Mehdi Ahmed-Nacer, Claudia-Lavinia Ignat, G´erald Oster, Hyun-Gul Roh, Pascal Urso&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://hal.inria.fr/hal-00957167/document&quot;&gt;Merging OT and CRDT Algorithms&lt;/a&gt; &lt;em&gt;Authored by Mehdi Ahmed-Nacer, Pascal Urso, Valter Balegas, Nuno Pregui¸ca&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Operational_transformation&quot;&gt;Wikipedia on Operational Transformation&lt;/a&gt; &lt;em&gt;One of the most informative articles, I have found on wikipedia, suprisingly.&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Deploy a Node.js app in minutes using Heroku!</title>
   <link href="http://srijanagarwal.me/writing/deploying-nodejs-app/"/>
   <updated>2017-04-26T06:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/deploying-nodejs-app</id>
   <content type="html">&lt;p&gt;As more and more Node.js projects are being coded, deploying a nodejs app just got easier. I would guide you through on how one can deploy a node.js app in minutes using Heroku.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Heroku?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heroku&lt;/em&gt; is a cloud platform that lets companies/individuals build, deliver, monitor, and scale applications. It is often regarded as the fastest way to go from an idea to URL bypassing all those infrastructure headaches (i.e, one doesn’t has to worry about infrastructure; just focus on the application).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Heroku offers?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Heroku offers &lt;em&gt;Platform as a Service [PaaS]&lt;/em&gt; type of cloud computing, the delivery of computing services : servers, storage, databases, networking, software, and more over the Internet (“the cloud”).&lt;/p&gt;

&lt;p&gt;Operating at the layer above raw computing hardware, whether physical or virtual, Platform as a Service [PaaS] provides a method for programming languages to interact with services like databases, web servers, and file storage, without having to deal with lower level requirements like how much space a database needs, whether the data must be protected by making a copy between 3 servers, or distributing the workload across servers that can be spread throughout the world. Typically, applications must be written for a specific PaaS offering to take full advantage of the service, and most platforms only support a limited set of programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages/Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt that Heroku takes away all the pain of installing softwares, configuring servers, maintaining, and monitoring the software — it takes care of most of the configurations. Other services could easily be added as add-ons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heroku&lt;/strong&gt; is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Easy deployment&lt;/li&gt;
  &lt;li&gt;Uses version control system commands (git)&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Plenty of Add-on resources (applications, databases etc.)&lt;/li&gt;
  &lt;li&gt;Processes scaling : independent scaling for each component of your app without affecting functionality and performance&lt;/li&gt;
  &lt;li&gt;Isolation : each process (i.e dyno) is completely isolated from each other thorough Documentation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to deploy a Node.js app :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are some prerequisites you need to have before deploying :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Node.js app. [ofcourse xD]&lt;/li&gt;
  &lt;li&gt;A free Heroku account.&lt;/li&gt;
  &lt;li&gt;The Heroku CLI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get down to it!
1.  Login to your Heroku via the command line heroku login. This will prompt for your credential.
Add Procfile to your application echo &lt;code class=&quot;highlighter-rouge&quot;&gt;‘web: ./node_modules/.bin/forever -m 5 server.js’ &amp;gt;Procfile&lt;/code&gt;
A Procfile is not necessary to deploy apps written in most languages supported by Heroku. The platform automatically detects the language, and creates a default web process type to boot the application server. 
In the case of Node.js, it will start a default web process via the start script in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Creating an explicit Procfile is recommended for greater control and flexibility for your app.As the case maybe, &lt;code class=&quot;highlighter-rouge&quot;&gt;web: ./node_modules/.bin/forever -m 5 server.js&lt;/code&gt;, I am using Node.js’ forever module to start my server named server.js&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create Heroku remote repository &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create appName&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the new changes made to the app &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit the snapshot &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m “Added a Procfile.”&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push to your app to the newly created heroku remote repository &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt; &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bonus: &lt;code class=&quot;highlighter-rouge&quot;&gt;run heroku logs&lt;/code&gt; to see logs. 
Note: If your app runs on a database, you will need to add the database as an add-on.&lt;/p&gt;

&lt;p&gt;Feel free to ping me on &lt;a href=&quot;www.twitter.com/srijancse&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Awesome features you must be using in JavaScript ES6!</title>
   <link href="http://srijanagarwal.me/writing/JSES6-Awesome-Features/"/>
   <updated>2017-04-15T13:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/JSES6-Awesome-Features</id>
   <content type="html">&lt;div class=&quot;image-wrap&quot;&gt;
&lt;div class=&quot;image-block&quot;&gt;
    &lt;img src=&quot;/images/js.png&quot; alt=&quot;js&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As the JavaScript community continued to expand rapidly in last few years, a lot of good things have happened to JavaScript as a language. One of those good things was its penetration into the server-side development world via Node.js (yaay).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: the list if highly biased and subjective. It is in no way was intended to diminish usefulness of other ES6 features, which didn’t make it to the list simply because I had to limit the number to 3.&lt;/p&gt;

&lt;h3&gt; 1. Default Parameters in ES6 &lt;/h3&gt;
&lt;p&gt;Before the arrival of ES2015, when one wanted to specify a default parameter in a function, he/she had to do it in the body of the function like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function greetHuman(name) {
    name = name || &#39;human&#39;;
    return &#39;Hello &#39; + name + &#39;, we come in peace&#39;;
}
    greetHuman();
    greetHuman(&#39;Srijan&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;They were okay until the value was 0, because 0 is falsy in JavaScript and it would default to the hard-coded value instead of becoming the value itself. Of course, who needs 0 as a value (:P), so we just ignored this flaw and used the logic OR anyway. No more!&lt;/p&gt;

&lt;p&gt;With ES6, one can now do this in a function head and as such, we no longer have to perform checks for undefined parameters in the function’s body.&lt;/p&gt;

&lt;p&gt;Here’s what the code in ES6 would look like if you’re combining arrow functions, template literal, and default:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const greetHuman = (name = &#39;human&#39;) =&amp;gt; `Hello ${human}, we come in peace`;
greetHuman(&#39;Srijan&#39;); &#39;Hello Srijan, we come in peace&#39;
greetHuman(); &#39;Hello human, we come in peace&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt; 2. Arrow Functions in ES6 &lt;/h3&gt;
&lt;p&gt;If you are a JavaScript developer, you would already know the good old way of declaring functions.&lt;/p&gt;

&lt;p&gt;This is probably one feature I waited the most. Now we have them in ES6. The arrows are amazing because they would make your this behave properly, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; will have the same value as in the context of the function—it won’t mutate. The mutation typically happens each time you create a closure.&lt;/p&gt;

&lt;p&gt;Using arrows functions in ES6 allows us to stop using &lt;code class=&quot;highlighter-rouge&quot;&gt;that = this or self = this or _this = this or .bind(this)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good ol’ ES5 code :
&lt;code class=&quot;highlighter-rouge&quot;&gt;
var _this = this
$(&#39;.btn&#39;).click(function(event){
  _this.send()
})
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the ES6 code without &lt;code class=&quot;highlighter-rouge&quot;&gt;_this = this:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&#39;.btn&#39;).click((event) =&amp;gt;{
  this.send()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the code looks shorter and cleaner — we can even omit the curly braces &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; (one-liners only). There is support for implicit return as well, so we can conveniently omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h3&gt; 3. Template Literals in ES6 &lt;/h3&gt;

&lt;p&gt;Template literals or interpolation in other languages is a way to output variables in the string. This remains one of the most important feature as it really makes string concatenation easier and much more bearable.&lt;/p&gt;

&lt;p&gt;So in ES5 we had to break the string like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name = &#39;Your name is &#39; + first + &#39; &#39; + last + &#39;.&#39;
var url = &#39;http://localhost/api/&#39; + id
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Luckily, in ES6 we can use a new syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;${NAME}&lt;/code&gt; inside of the back-ticked string:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name = `Your name is ${first} ${last}.`
var url = `http://localhost/api/${id}`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can learn more about ES6 features &lt;a href=&quot;http://exploringjs.com/es6/&quot;&gt;here&lt;/a&gt;. A &lt;a href=&quot;https://github.com/azat-co/cheatsheets/tree/master/es6&quot;&gt;cheatsheet&lt;/a&gt; too.&lt;/p&gt;
</content>
 </entry>
 
</feed>
