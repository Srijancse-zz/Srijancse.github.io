<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Your Title - technical</title>
 <link href="http://srijanagarwal.me/tag/technical/index.xml" rel="self"/>
 <link href="http://srijanagarwal.me/tag/technical.html"/>
 <updated>2017-05-01T14:10:04+05:30</updated>
 <id>http://srijanagarwal.me/tag/technical.html</id>
 <author>
   <name>Author Here</name>
 </author>
 
 <entry>
   <title>Operational Transformation and Conflict-free Replicated Data Types!</title>
   <link href="http://srijanagarwal.me/writing/collaborative-editing/"/>
   <updated>2017-05-01T06:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/collaborative-editing</id>
   <content type="html">&lt;p&gt;Recently, I’ve been diving deep on how &lt;strong&gt;real-time collaborative&lt;/strong&gt; editing works. I have been reading various papers on both the methods of implementing collaborative editing : &lt;strong&gt;Operational Transformation&lt;/strong&gt;, which goes back to 1989, when it was first implemented by the &lt;a href=&quot;https://www.lri.fr/~mbl/ENS/CSCW/2012/papers/Ellis-SIGMOD89.pdf&quot;&gt;GROVE (GRoup Outtie Viewing Editor)&lt;/a&gt; system (this algorithm is quite old, and Google uses this algorithm for collaborative editing for Google Docs, Google Slides, etc; Wave) and &lt;strong&gt;Conflict-Free Replicated Data Types&lt;/strong&gt;, which is a much newer approach to real-time editing.&lt;/p&gt;

&lt;h3 id=&quot;real-challenge-of-collaborative-editing&quot;&gt;Real challenge of collaborative editing&lt;/h3&gt;

&lt;p&gt;If you know how real-time collaborative editing works, then you may know that handling concurrent editing in multi user environment gracefully is very challenging. However, a few simple concepts can simplify this problem. The main challenge, as mentioned, with collaborative editing is the concurrency control [&lt;strong&gt;concurrent edits&lt;/strong&gt;] to the document are not commutative. This needs to be causally ordered before applying either by undoing history, or by transforming the operations [&lt;strong&gt;operational transformation&lt;/strong&gt;] before applying them to make them seem commutative.&lt;/p&gt;

&lt;h3 id=&quot;bringing-latency-into-action&quot;&gt;Bringing Latency into action&lt;/h3&gt;

&lt;p&gt;Introducing latency between the client and server is where the problems arise. Latency in a collaborative editor introduces the possibility of version conflicts. Here, where, I said Operational Transformation will come into action.&lt;/p&gt;

&lt;p&gt;Let’s take an example :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Client’s state :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; abcd &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Starting Server’s state :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt; abcd &lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Client&lt;/em&gt; enters &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; in between &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; , the operation would look something like this :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;insert(x,3) //where 3 is the position where x is going to be added (0=a, 1=b, 2=c ..)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And at the same time, &lt;em&gt;Server&lt;/em&gt; deletes &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt; , the operation would be :&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;delete(b,1)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What actually should happen is that the client and server should both end with &lt;code class=&quot;highlighter-rouge&quot;&gt;acxd&lt;/code&gt; but in reality, &lt;em&gt;client&lt;/em&gt; ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;acxd&lt;/code&gt; but the &lt;em&gt;server&lt;/em&gt; ends with &lt;code class=&quot;highlighter-rouge&quot;&gt;acdx&lt;/code&gt;. Ofcourse, &lt;code class=&quot;highlighter-rouge&quot;&gt;acxd != acdx&lt;/code&gt; and the document which is shared now is in wrong state.&lt;/p&gt;

&lt;p&gt;Here is where the &lt;strong&gt;Operational Transformation&lt;/strong&gt; comes to the rescue.&lt;/p&gt;

&lt;h3 id=&quot;client---server-ot-approach-to-collaborative-editing&quot;&gt;Client - Server [OT] Approach to Collaborative Editing&lt;/h3&gt;

&lt;p&gt;Choosing a Client-Server architecture will allow scouting a large number of clients without actually complicating the environment. Also, there will be a single system which holds the source of truth i.e. the server, so even if the clients crash/go offline for a long time, we can go back to the server and fetch the document easily.&lt;/p&gt;

&lt;p&gt;This source of truth also forces the client to wait for the server to &lt;strong&gt;acknowledge&lt;/strong&gt; the operation that the client has just sent which would mean that the client always stays on the server’s OT path. This would help in keeping a single history of operations without actually having to keep a mirror of the state for each client that is connected. That would eventually mean the number of clients that are connected to the server would have only one single copy of the document on the server.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Deploy a Node.js app in minutes using Heroku!</title>
   <link href="http://srijanagarwal.me/writing/deploying-nodejs-app/"/>
   <updated>2017-04-26T06:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/deploying-nodejs-app</id>
   <content type="html">&lt;p&gt;As more and more Node.js projects are being coded, deploying a nodejs app just got easier. I would guide you through on how one can deploy a node.js app in minutes using Heroku.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is Heroku?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Heroku&lt;/em&gt; is a cloud platform that lets companies/individuals build, deliver, monitor, and scale applications. It is often regarded as the fastest way to go from an idea to URL bypassing all those infrastructure headaches (i.e, one doesn’t has to worry about infrastructure; just focus on the application).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What Heroku offers?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Heroku offers &lt;em&gt;Platform as a Service [PaaS]&lt;/em&gt; type of cloud computing, the delivery of computing services : servers, storage, databases, networking, software, and more over the Internet (“the cloud”).&lt;/p&gt;

&lt;p&gt;Operating at the layer above raw computing hardware, whether physical or virtual, Platform as a Service [PaaS] provides a method for programming languages to interact with services like databases, web servers, and file storage, without having to deal with lower level requirements like how much space a database needs, whether the data must be protected by making a copy between 3 servers, or distributing the workload across servers that can be spread throughout the world. Typically, applications must be written for a specific PaaS offering to take full advantage of the service, and most platforms only support a limited set of programming languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages/Benefits&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There is no doubt that Heroku takes away all the pain of installing softwares, configuring servers, maintaining, and monitoring the software — it takes care of most of the configurations. Other services could easily be added as add-ons.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heroku&lt;/strong&gt; is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Easy deployment&lt;/li&gt;
  &lt;li&gt;Uses version control system commands (git)&lt;/li&gt;
  &lt;li&gt;Security&lt;/li&gt;
  &lt;li&gt;Plenty of Add-on resources (applications, databases etc.)&lt;/li&gt;
  &lt;li&gt;Processes scaling : independent scaling for each component of your app without affecting functionality and performance&lt;/li&gt;
  &lt;li&gt;Isolation : each process (i.e dyno) is completely isolated from each other thorough Documentation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How to deploy a Node.js app :&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Here are some prerequisites you need to have before deploying :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A Node.js app. [ofcourse xD]&lt;/li&gt;
  &lt;li&gt;A free Heroku account.&lt;/li&gt;
  &lt;li&gt;The Heroku CLI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s get down to it!
1.  Login to your Heroku via the command line heroku login. This will prompt for your credential.
Add Procfile to your application echo &lt;code class=&quot;highlighter-rouge&quot;&gt;‘web: ./node_modules/.bin/forever -m 5 server.js’ &amp;gt;Procfile&lt;/code&gt;
A Procfile is not necessary to deploy apps written in most languages supported by Heroku. The platform automatically detects the language, and creates a default web process type to boot the application server. 
In the case of Node.js, it will start a default web process via the start script in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;. Creating an explicit Procfile is recommended for greater control and flexibility for your app.As the case maybe, &lt;code class=&quot;highlighter-rouge&quot;&gt;web: ./node_modules/.bin/forever -m 5 server.js&lt;/code&gt;, I am using Node.js’ forever module to start my server named server.js&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Create Heroku remote repository &lt;code class=&quot;highlighter-rouge&quot;&gt;heroku create appName&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the new changes made to the app &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Commit the snapshot &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m “Added a Procfile.”&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Push to your app to the newly created heroku remote repository &lt;code class=&quot;highlighter-rouge&quot;&gt;git push heroku master&lt;/code&gt; &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Bonus: &lt;code class=&quot;highlighter-rouge&quot;&gt;run heroku logs&lt;/code&gt; to see logs. 
Note: If your app runs on a database, you will need to add the database as an add-on.&lt;/p&gt;

&lt;p&gt;Feel free to ping me on &lt;a href=&quot;www.twitter.com/srijancse&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Awesome features you must be using in JavaScript ES6!</title>
   <link href="http://srijanagarwal.me/writing/JSES6-Awesome-Features/"/>
   <updated>2017-04-15T13:13:39+05:30</updated>
   <id>http://srijanagarwal.me/writing/JSES6-Awesome-Features</id>
   <content type="html">&lt;div class=&quot;image-wrap&quot;&gt;
&lt;div class=&quot;image-block&quot;&gt;
    &lt;img src=&quot;/images/js.png&quot; alt=&quot;js&quot; /&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;As the JavaScript community continued to expand rapidly in last few years, a lot of good things have happened to JavaScript as a language. One of those good things was its penetration into the server-side development world via Node.js (yaay).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: the list if highly biased and subjective. It is in no way was intended to diminish usefulness of other ES6 features, which didn’t make it to the list simply because I had to limit the number to 3.&lt;/p&gt;

&lt;h3&gt; 1. Default Parameters in ES6 &lt;/h3&gt;
&lt;p&gt;Before the arrival of ES2015, when one wanted to specify a default parameter in a function, he/she had to do it in the body of the function like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function greetHuman(name) {
    name = name || &#39;human&#39;;
    return &#39;Hello &#39; + name + &#39;, we come in peace&#39;;
}
    greetHuman();
    greetHuman(&#39;Srijan&#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;They were okay until the value was 0, because 0 is falsy in JavaScript and it would default to the hard-coded value instead of becoming the value itself. Of course, who needs 0 as a value (:P), so we just ignored this flaw and used the logic OR anyway. No more!&lt;/p&gt;

&lt;p&gt;With ES6, one can now do this in a function head and as such, we no longer have to perform checks for undefined parameters in the function’s body.&lt;/p&gt;

&lt;p&gt;Here’s what the code in ES6 would look like if you’re combining arrow functions, template literal, and default:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const greetHuman = (name = &#39;human&#39;) =&amp;gt; `Hello ${human}, we come in peace`;
greetHuman(&#39;Srijan&#39;); &#39;Hello Srijan, we come in peace&#39;
greetHuman(); &#39;Hello human, we come in peace&#39;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt; 2. Arrow Functions in ES6 &lt;/h3&gt;
&lt;p&gt;If you are a JavaScript developer, you would already know the good old way of declaring functions.&lt;/p&gt;

&lt;p&gt;This is probably one feature I waited the most. Now we have them in ES6. The arrows are amazing because they would make your this behave properly, i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;this&lt;/code&gt; will have the same value as in the context of the function—it won’t mutate. The mutation typically happens each time you create a closure.&lt;/p&gt;

&lt;p&gt;Using arrows functions in ES6 allows us to stop using &lt;code class=&quot;highlighter-rouge&quot;&gt;that = this or self = this or _this = this or .bind(this)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Good ol’ ES5 code :
&lt;code class=&quot;highlighter-rouge&quot;&gt;
var _this = this
$(&#39;.btn&#39;).click(function(event){
  _this.send()
})
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is the ES6 code without &lt;code class=&quot;highlighter-rouge&quot;&gt;_this = this:&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$(&#39;.btn&#39;).click((event) =&amp;gt;{
  this.send()
})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;As you can see, the code looks shorter and cleaner — we can even omit the curly braces &lt;code class=&quot;highlighter-rouge&quot;&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt; (one-liners only). There is support for implicit return as well, so we can conveniently omit the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword.&lt;/p&gt;

&lt;h3&gt; 3. Template Literals in ES6 &lt;/h3&gt;

&lt;p&gt;Template literals or interpolation in other languages is a way to output variables in the string. This remains one of the most important feature as it really makes string concatenation easier and much more bearable.&lt;/p&gt;

&lt;p&gt;So in ES5 we had to break the string like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name = &#39;Your name is &#39; + first + &#39; &#39; + last + &#39;.&#39;
var url = &#39;http://localhost/api/&#39; + id
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Luckily, in ES6 we can use a new syntax &lt;code class=&quot;highlighter-rouge&quot;&gt;${NAME}&lt;/code&gt; inside of the back-ticked string:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var name = `Your name is ${first} ${last}.`
var url = `http://localhost/api/${id}`
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can learn more about ES6 features &lt;a href=&quot;http://exploringjs.com/es6/&quot;&gt;here&lt;/a&gt;. A &lt;a href=&quot;https://github.com/azat-co/cheatsheets/tree/master/es6&quot;&gt;cheatsheet&lt;/a&gt; too.&lt;/p&gt;
</content>
 </entry>
 
</feed>
